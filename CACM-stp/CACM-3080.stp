proving correctness heuristically optimized code  system proving programs written high level language correctly translated  low level language  primary system post optimization step code  generation  low level language programs need generated compiler fact  hand coded  examples usefulness system  interesting results  ability handle programs implement recursion bypassing start program detection  pinpointing wide class errors low level language programs  examples demonstrate  optimization genre paper result substantially faster operation saving  memory terms program stack sizes cacm july 1978 samet 