algorithm blocks cutnodes graph efficient method presented finding blocks cutnodes arbitrary undirected  graph  graph represented ordered list edges ii packed adjacency  matrix  denotes word length machine employed storage machine words required  graph nodes edges increases essentially case case  ii  spanning tree labeled edges grown edges finally bearing labels  belong blocks  representations time required analyze graph  nodes increases ng depends type graph   bounds attained   values derived suitable families test graphs generated extension  web grammar approach  algorithm compared detail proposed read    cacm july paton 