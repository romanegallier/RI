model type checking programming languages treat computation classes objects  numbers strings labels functions  correct compilation execution question  arises program properly constructed operations operands compatible   activity answering question called type checking  paper attempts isolate  notion type checking presents partial solution type checking problem based  notions abstraction application functions  program mapped expression  decidable subset lambda calculus characterizes type relations program  eliminates information  determination typewise correctness incorrectness  program resolved reducing lambda calculus expression normal  forms constant correct typewise correct program constant error  application  type checking algol made attendant problems faced notion type checking  discussed cacm november ledgard 